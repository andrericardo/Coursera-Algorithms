Q1. Java autoboxing and equals(). Consider two double values a and b and their corresponding <tt>Double</tt> values x and y.
Find values such that (a==b) is true but x.equals(y) is false.
Find values such that (a==b) is false but x.equals(y) is true.
A1.
1. 
a == 0.0, b == -0.0
necessary so that 10/+0.0 can be distinguished from 10/-0.0

2.
a == b == Double.NaN
handy for numerical comparison

Q2. Check if a binary tree is a BST. Given a binary tree where each Node contains a key, determine whether it is a binary search tree. Use extra space proportional to the height of the tree.
See the code outside.

Q3. Inorder traversal with constant extra space. Design an algorithm to perform an inorder traversal of a binary search tree using only a constant amount of extra space.
A3.
private void inorderMorris(TreeNode root, ArrayList<Integer> values) {  
   TreeNode cur = root;  
   
   while (cur != null) {  
     if (cur.left != null) {  
       TreeNode pre = cur.left;  
       while (pre.right != null && pre.right != cur) {  
         pre = pre.right;  
       }  
       if (pre.right == null) { // set right to successor  
         pre.right = cur;  
         cur = cur.left;  
       } else { // visit and revert the change  
         pre.right = null;  
         values.add(cur.val);  
         cur = cur.right;  
       }  
     } else { // visit and move to successor 
       values.add(cur.val);  
       cur = cur.right;  
     }  
   }  
 }

link:
http://n00tc0d3r.blogspot.com/2013/09/inorder-binary-tree-traversal-with.html

Q4.
Web tracking. Suppose that you are tracking n web sites and m users and you want to support the following API:
User visits a website.
How many times has a given user visited a given site?
What data structure or data structures would you use?
A4.
SymbolTable[<user>,SymbolTable[<website>, <frequency>]]
username as key, a SymbolTable of website and frequency as value.
in that SymbolTable, website is the key and frequency is the value.



