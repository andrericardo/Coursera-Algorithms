1. Monotonic shortest path. 
Given an edge-weighted digraph G, design an E*log(E) algorithm to find a monotonic shortest path from s to every other vertex. 
A path is monotonic if the sequence of edge weights along the path are either strictly increasing or strictly decreasing.
 - 1. Sort edges of each vertex, ascending or descending
 - 2. relax edges using Dijkstra algorithm, check monotonic condition before check distTo
https://stackoverflow.com/questions/22876105/find-a-monotonic-shortest-path-in-a-graph-in-oe-logv
(see monotonic.cpp)

2. Second shortest path. 
Given an edge-weighted digraph and let P be a shortest path from vertex s to vertex t. 
Design an E*log(V) algorithm to find a path other than P from s to t that is as short as possible. 
Assume all of the edge weights are strictly positive.
(see secondSP_floyd.cpp for floyd-warshall-based solution)
(see secondSP_Dijkstra.cpp for Dijkstra-based solution)

3. Shortest path with one skippable edge. 
Given an edge-weighted digraph, design an E*log(V) algorithm to find a shortest path from s to t 
where you can change the weight of any one edge to zero. Assume the edge weights are non-negative.
 - 1. First use Dijkstra to find the length S(v) of shortest path from s to v for every vertex v. 
 - 2. Then use Dijkstra to find the length T(v) of shortest path from v to t for every vertex v. 
 - 3. Then for every edge (v, w) find the sum S(v) + T(w) by using the rules above. 
 - 4. Finally, choose the minimum path.
Note: In this approach we nullify the edge (v,w) weight and find the shortest path through (v,w)
https://stackoverflow.com/questions/16291676/shortest-path-with-one-skippable-edge